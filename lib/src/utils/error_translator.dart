class ErrorTranslator {
  /// Translates common English error messages to Arabic
  static String translateError(String errorMessage) {
    // Clean the error message by removing extra spaces and converting to lowercase
    final cleanMessage = errorMessage
        .trim()
        .toLowerCase(); // Map of common error messages in English to Arabic
    final Map<String, String> errorMap = {
      'user already exists': 'ุงููุณุชุฎุฏู ููุฌูุฏ ุจุงููุนู',
      'email already exists': 'ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ููุฌูุฏ ุจุงููุนู',
      'user not found': 'ุงููุณุชุฎุฏู ุบูุฑ ููุฌูุฏ',
      'invalid credentials': 'ุจูุงูุงุช ุงูุฏุฎูู ุบูุฑ ุตุญูุญุฉ',
      'invalid email': 'ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ุบูุฑ ุตุญูุญ',
      'email must be an email': 'ูุฌุจ ุฃู ูููู ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ุตุญูุญุงู',
      'invalid password': 'ูููุฉ ุงููุฑูุฑ ุบูุฑ ุตุญูุญุฉ',
      'password too short': 'ูููุฉ ุงููุฑูุฑ ูุตูุฑุฉ ุฌุฏุงู',
      'password too weak': 'ูููุฉ ุงููุฑูุฑ ุถุนููุฉ',
      'email is required': 'ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ูุทููุจ',
      'password is required': 'ูููุฉ ุงููุฑูุฑ ูุทููุจุฉ',
      'name is required': 'ุงูุงุณู ูุทููุจ',
      'invalid phone number': 'ุฑูู ุงููุงุชู ุบูุฑ ุตุญูุญ',
      'phone number already exists': 'ุฑูู ุงููุงุชู ููุฌูุฏ ุจุงููุนู',
      'account not verified': 'ุงูุญุณุงุจ ุบูุฑ ููุนู',
      'please verify your email before logging in':
          'ูุฑุฌู ุชุฃููุฏ ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ูุจู ุชุณุฌูู ุงูุฏุฎูู',
      'verification code expired': 'ุฑูุฒ ุงูุชุญูู ููุชูู ุงูุตูุงุญูุฉ',
      'invalid verification code': 'ุฑูุฒ ุงูุชุญูู ุบูุฑ ุตุญูุญ',
      'email verified successfully': 'ุชู ุงูุชุญูู ูู ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ุจูุฌุงุญ',
      'otp is required': 'ุฑูุฒ ุงูุชุญูู ูุทููุจ',
      'otp must be 4 digits': 'ุฑูุฒ ุงูุชุญูู ูุฌุจ ุฃู ูููู 4 ุฃุฑูุงู',
      'invalid otp': 'ุฑูุฒ ุงูุชุญูู ุบูุฑ ุตุญูุญ',
      'otp expired': 'ุงูุชูุช ุตูุงุญูุฉ ุฑูุฒ ุงูุชุญูู',
      'too many requests': 'ุชู ุฅุฑุณุงู ุทูุจุงุช ูุซูุฑุฉุ ูุฑุฌู ุงูุงูุชุธุงุฑ',
      'network error': 'ุฎุทุฃ ูู ุงูุดุจูุฉ',
      'server error': 'ุฎุทุฃ ูู ุงูุฎุงุฏู',
      'connection timeout': 'ุงูุชูุช ูููุฉ ุงูุงุชุตุงู',
      'unauthorized': 'ุบูุฑ ูุฎูู ูููุตูู',
      'forbidden': 'ููููุน ุงููุตูู',
      'not found': 'ุบูุฑ ููุฌูุฏ',
      'internal server error': 'ุฎุทุฃ ุฏุงุฎูู ูู ุงูุฎุงุฏู',
      'bad request': 'ุทูุจ ุบูุฑ ุตุญูุญ',
      'service unavailable': 'ุงูุฎุฏูุฉ ุบูุฑ ูุชุงุญุฉ',
      // ุฅุถุงูุฉ ุฑุณุงุฆู ุฎุทุฃ ุฌุฏูุฏุฉ ููุดุงูู ุงูุงุชุตุงู
      'failed host lookup': 'ูุง ูููู ุงูุงุชุตุงู ุจุงูุฎุงุฏู',
      'connection errored': 'ุฎุทุฃ ูู ุงูุงุชุตุงู ุจุงูุฎุงุฏู',
      'no address associated with hostname': 'ูุง ูููู ุงููุตูู ููุฎุงุฏู',
      'socket exception': 'ูุดููุฉ ูู ุงูุงุชุตุงู',
      'connection error': 'ุฎุทุฃ ูู ุงูุงุชุตุงู',
      'no internet connection': 'ูุง ููุฌุฏ ุงุชุตุงู ุจุงูุฅูุชุฑูุช',
    };

    // Check for exact matches first
    if (errorMap.containsKey(cleanMessage)) {
      return errorMap[cleanMessage]!;
    }

    // Check for partial matches
    for (final entry in errorMap.entries) {
      if (cleanMessage.contains(entry.key)) {
        return entry.value;
      }
    }

    // If no translation found, return the original message
    // This ensures we don't lose any important error information
    return errorMessage;
  }

  /// Translates error messages with context (status code)
  static String translateErrorWithContext(
      String errorMessage, int? statusCode) {
    final translatedMessage = translateError(errorMessage);

    // If translation was found (different from original), return it
    if (translatedMessage != errorMessage) {
      return translatedMessage;
    }

    // If no specific translation found, provide generic message based on status code
    switch (statusCode) {
      case 400:
        return 'ุงูุจูุงูุงุช ุงููุฏุฎูุฉ ุบูุฑ ุตุญูุญุฉ - ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู';
      case 401:
        return 'ุบูุฑ ูุฎูู - ูุฑุฌู ุชุณุฌูู ุงูุฏุฎูู ูุฑุฉ ุฃุฎุฑู';
      case 403:
        return 'ููููุน ุงููุตูู - ููุณ ูุฏูู ุตูุงุญูุฉ ูุชูููุฐ ูุฐู ุงูุนูููุฉ';
      case 404:
        return 'ุบูุฑ ููุฌูุฏ - ุงูููุฑุฏ ุงููุทููุจ ุบูุฑ ูุชุงุญ';
      case 409:
        return 'ุชุนุงุฑุถ ูู ุงูุจูุงูุงุช - ุงููุนูููุงุช ููุฌูุฏุฉ ุจุงููุนู';
      case 422:
        return 'ุจูุงูุงุช ุบูุฑ ุตุงูุญุฉ - ูุฑุฌู ุงูุชุญูู ูู ุงููุนูููุงุช ุงููุฏุฎูุฉ';
      case 429:
        return 'ุชู ุชุฌุงูุฒ ุงูุญุฏ ุงููุณููุญ - ูุฑุฌู ุงูุงูุชุธุงุฑ ูุจู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู';
      case 500:
        return 'ุฎุทุฃ ูู ุงูุฎุงุฏู - ูุฑุฌู ุงููุญุงููุฉ ูุงุญูุงู';
      case 502:
        return 'ุฎุทุฃ ูู ุงูุจูุงุจุฉ - ูุฑุฌู ุงููุญุงููุฉ ูุงุญูุงู';
      case 503:
        return 'ุงูุฎุฏูุฉ ุบูุฑ ูุชุงุญุฉ ูุคูุชุงู - ูุฑุฌู ุงููุญุงููุฉ ูุงุญูุงู';
      case 504:
        return 'ุงูุชูุช ูููุฉ ุงูุงุชุตุงู - ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู';
      default:
        return translatedMessage;
    }
  }

  /// ูุนุงูุฌุฉ ุฃุฎุทุงุก Dio ุจุดูู ุดุงูู ูุฅุฑุฌุงุน ุฑุณุงูุฉ ูุงุถุญุฉ ูููุณุชุฎุฏู
  static String handleDioError(dynamic error) {
    if (error is Exception) {
      String errorString = error.toString().toLowerCase();
      
      // ูุนุงูุฌุฉ ุฃุฎุทุงุก ุงูุงุชุตุงู ุงูุดุงุฆุนุฉ
      if (errorString.contains('failed host lookup') || 
          errorString.contains('connection errored') ||
          errorString.contains('no address associated') ||
          errorString.contains('socket exception')) {
        return '''๐ ูุดููุฉ ูู ุงูุงุชุตุงู

โ ูุง ูููู ุงููุตูู ููุฎุงุฏู ุญุงููุงู

๐ง ุงูุญููู ุงูููุชุฑุญุฉ:
โข ุชุฃูุฏ ูู ุงุชุตุงูู ุจุงูุฅูุชุฑูุช
โข ุชุญูู ูู ุฅุนุฏุงุฏุงุช ุงููุงู ูุงู ุฃู ุงูุจูุงูุงุช
โข ุฃุนุฏ ุงููุญุงููุฉ ุจุนุฏ ูููู
โข ุชุฃูุฏ ูู ุนูู ุงูุชุทุจููุงุช ุงูุฃุฎุฑู''';
      }
      
      if (errorString.contains('connection timeout') ||
          errorString.contains('receive timeout') ||
          errorString.contains('send timeout')) {
        return '''โฑ๏ธ ุงูุชูุช ูููุฉ ุงูุงุชุตุงู

โ ุงูุงุชุตุงู ุจุทูุก ุฃู ูููุทุน

๐ง ุงูุญููู ุงูููุชุฑุญุฉ:
โข ุชุญูู ูู ุณุฑุนุฉ ุงูุฅูุชุฑูุช
โข ุงูุชูู ูููุงู ุจุฅุดุงุฑุฉ ุฃููู
โข ุฃุนุฏ ุงููุญุงููุฉ ุจุนุฏ ูููู''';
      }
      
      if (errorString.contains('connection error')) {
        return '''๐ ุฎุทุฃ ูู ุงูุงุชุตุงู

โ ูุดููุฉ ูู ุงูุดุจูุฉ

๐ง ุงูุญููู ุงูููุชุฑุญุฉ:
โข ุชุฃูุฏ ูู ุงุชุตุงูู ุจุงูุฅูุชุฑูุช
โข ุฌุฑุจ ุฅุบูุงู ูุฅุนุงุฏุฉ ูุชุญ ุงูุชุทุจูู
โข ุชุญูู ูู ุฅุนุฏุงุฏุงุช ุงูุดุจูุฉ''';
      }
    }
    
    // ูู ุญุงูุฉ ุนุฏู ุชุญุฏูุฏ ููุน ุงูุฎุทุฃุ ุงุณุชุฎุฏู ุงูุชุฑุฌูุฉ ุงูุนุงุฏูุฉ
    return translateError(error.toString());
  }
}
